% Matlab DCSFQ Simulation
% Constants
hn = 0.25E-12;
phi0 = 2.06783383113E-5;
hbar_2e = 2 * pi / phi0;
T = 1000E-12;
N = 4000;
% JJ model properties
jjVgap = 2.8E-3;
jjCap = 0.07E-12;
jjR0 = 160;
jjRn = 16;
jjIcrit = 0.1E-3;
% Components
L01 = 0.848E-12;L02 = 7.712E-12;L03 = 1.778E-12;L04 = 0.543E-12;L05 = 3.149E-12;
L06 = 1.323E-12;L07 = 1.095E-12;L08 = 2.951E-12;L09 = 1.63E-12;LP01 = 0.398E-12;
LP02 = 0.211E-12;LP03 = 0.276E-12;LP04 = 0.224E-12;LPR01 = 0.915E-12;
LPR02 = 0.307E-12;LRB01 = 1E-12;LRB02 = 1E-12;LRB03 = 1E-12;LRB04 = 1E-12;
LRB05 = 1E-12;RB01 = 8.56;RB02 = 11.30;RB03 = 7.53;RB04 = 5.77;RB05 = 5.77;
ROUT = 2;
% Junctions
B01AREA = 1.32;B01CAP = jjCap / B01AREA;B01RN = jjRn / B01AREA;B01R0 = jjR0 / B01AREA;B01ICRIT = jjIcrit * B01AREA;
B02AREA = 1;B02CAP = jjCap / B02AREA;B02RN = jjRn / B02AREA;B02R0 = jjR0 / B02AREA;B02ICRIT = jjIcrit * B02AREA;
B03AREA = 1.5;B03CAP = jjCap / B03AREA;B03RN = jjRn / B03AREA;B03R0 = jjR0 / B03AREA;B03ICRIT = jjIcrit * B03AREA;
B04AREA = 1.96;B04CAP = jjCap / B04AREA;B04RN = jjRn / B04AREA;B04R0 = jjR0 / B04AREA;B04ICRIT = jjIcrit * B04AREA;
B05AREA = 1.96;B05CAP = jjCap / B05AREA;B05RN = jjRn / B05AREA;B05R0 = jjR0 / B05AREA;B05ICRIT = jjIcrit * B05AREA;
% Column indices
C_PB01 = 1;C_NV5 = 2;C_NV3 = 3;C_PB02 = 4;C_NV6 = 5;C_PB03 = 6;C_NV9 = 7;
C_NV10 = 8;C_PB04 = 9;C_NV13 = 10;C_NV14 = 11;C_PB05 = 12;C_NV15 = 13;
C_NV16 = 14;C_NV8 = 15;C_NV12 = 16;C_NV2 = 17;C_IL01 = 18;C_NV1 = 19;
C_IL02 = 20;C_IL03 = 21;C_IL04 = 22;C_NV7 = 23;C_IL05 = 24;C_IL06 = 25;
C_NV11 = 26;C_IL07 = 27;C_IL08 = 28;C_IL09 = 29;C_NV17 = 30;C_ILP01 = 31;
C_ILP02 = 32;C_ILP03 = 33;C_ILP04 = 34;C_ILPR01 = 35;C_ILPR02 = 36;
C_ILRB01 = 37;C_NV4 = 38;C_ILRB02 = 39;C_NV18 = 40;C_ILRB03 = 41;
C_NV19 = 42;C_ILRB04 = 43;C_NV20 = 44;C_ILRB05 = 45;C_NV21 = 46;
% Row indices
R_B01 = 1;R_N5 = 2;R_N3 = 3;R_B02 = 4;R_N6 = 5;R_B03 = 6;R_N9 = 7;R_N10 = 8;
R_B04 = 9;R_N13 = 10;R_N14 = 11;R_B05 = 12;R_N15 = 13;R_N16 = 14;R_N8 = 15;
R_N12 = 16;R_N2 = 17;R_L01 = 18;R_N1 = 19;R_L02 = 20;R_L03 = 21;R_L04 = 22;
R_N7 = 23;R_L05 = 24;R_L06 = 25;R_N11 = 26;R_L07 = 27;R_L08 = 28;R_L09 = 29;
R_N17 = 30;R_LP01 = 31;R_LP02 = 32;R_LP03 = 33;R_LP04 = 34;R_LPR01 = 35;
R_LPR02 = 36;R_LRB01 = 37;R_N4 = 38;R_LRB02 = 39;R_N18 = 40;R_LRB03 = 41;
R_N19 = 42;R_LRB04 = 43;R_N20 = 44;R_LRB05 = 45;R_N21 = 46;
% A Matrix Creation
B01_mat = zeros(46,46);B02_mat = zeros(46,46);B03_mat = zeros(46,46);B04_mat = zeros(46,46);B05_mat = zeros(46,46);
L01_mat = zeros(46,46);L02_mat = zeros(46,46);L03_mat = zeros(46,46);L04_mat = zeros(46,46);
L05_mat = zeros(46,46);L06_mat = zeros(46,46);L07_mat = zeros(46,46);L08_mat = zeros(46,46);L09_mat = zeros(46,46);
LP01_mat = zeros(46,46);LP02_mat = zeros(46,46);LP03_mat = zeros(46,46);LP04_mat = zeros(46,46);
LPR01_mat = zeros(46,46);LPR02_mat = zeros(46,46);
LRB01_mat = zeros(46,46);LRB02_mat = zeros(46,46);LRB03_mat = zeros(46,46);LRB04_mat = zeros(46,46);LRB05_mat = zeros(46,46);
RB01_mat = zeros(46,46);RB02_mat = zeros(46,46);RB03_mat = zeros(46,46);RB04_mat = zeros(46,46);RB05_mat = zeros(46,46);
ROUT_mat = zeros(46,46);

B01_mat(R_N5,C_NV5) = (2 * B01CAP / hn) + (1 / B01R0);
B01_mat(R_N5,C_NV3) = -(2 * B01CAP / hn) + (1 / B01R0);
B01_mat(R_N3,C_NV5) = -(2 * B01CAP / hn) + (1 / B01R0);
B01_mat(R_N3,C_NV3) = (2 * B01CAP / hn) + (1 / B01R0);
B01_mat(R_B01,C_NV5) = -(hn/2)*hbar_2e;
B01_mat(R_B01,C_NV3) = (hn/2)*hbar_2e;
B01_mat(R_B01,C_PB01) = 1;

B02_mat(R_N5,C_NV5) = (2 * B02CAP / hn) + (1 / B02R0);
B02_mat(R_N5,C_NV6) = -(2 * B02CAP / hn) + (1 / B02R0);
B02_mat(R_N6,C_NV5) = -(2 * B02CAP / hn) + (1 / B02R0);
B02_mat(R_N6,C_NV6) = (2 * B02CAP / hn) + (1 / B02R0);
B02_mat(R_B02,C_NV5) = -(hn/2)*hbar_2e;
B02_mat(R_B02,C_NV6) = (hn/2)*hbar_2e;
B02_mat(R_B02,C_PB02) = 1;

B03_mat(R_N9,C_NV9) = (2 * B03CAP / hn) + (1 / B03R0);
B03_mat(R_N9,C_NV10) = -(2 * B03CAP / hn) + (1 / B03R0);
B03_mat(R_N10,C_NV9) = -(2 * B03CAP / hn) + (1 / B03R0);
B03_mat(R_N10,C_NV10) = (2 * B03CAP / hn) + (1 / B03R0);
B03_mat(R_B03,C_NV9) = -(hn/2)*hbar_2e;
B03_mat(R_B03,C_NV10) = (hn/2)*hbar_2e;
B03_mat(R_B03,C_PB03) = 1;

B04_mat(R_N13,C_NV13) = (2 * B04CAP / hn) + (1 / B04R0);
B04_mat(R_N13,C_NV14) = -(2 * B04CAP / hn) + (1 / B04R0);
B04_mat(R_N14,C_NV13) = -(2 * B04CAP / hn) + (1 / B04R0);
B04_mat(R_N14,C_NV14) = (2 * B04CAP / hn) + (1 / B04R0);
B04_mat(R_B04,C_NV13) = -(hn/2)*hbar_2e;
B04_mat(R_B04,C_NV14) = (hn/2)*hbar_2e;
B04_mat(R_B04,C_PB04) = 1;

B05_mat(R_N15,C_NV15) = (2 * B05CAP / hn) + (1 / B05R0);
B05_mat(R_N15,C_NV16) = -(2 * B05CAP / hn) + (1 / B05R0);
B05_mat(R_N16,C_NV15) = -(2 * B05CAP / hn) + (1 / B05R0);
B05_mat(R_N16,C_NV16) = (2 * B05CAP / hn) + (1 / B05R0);
B05_mat(R_B05,C_NV15) = -(hn/2)*hbar_2e;
B05_mat(R_B05,C_NV16) = (hn/2)*hbar_2e;
B05_mat(R_B05,C_PB05) = 1;

L01_mat(R_N2,C_IL01) = 1;
L01_mat(R_N1,C_IL01) = -1;
L01_mat(R_L01,C_NV2) = 1;
L01_mat(R_L01,C_NV1) = -1;
L01_mat(R_L01,C_IL01) = -2*(L01 / hn);

L02_mat(R_N1,C_IL02) = -1;
L02_mat(R_L02,C_NV1) = -1;
L02_mat(R_L02,C_IL02) = -2*(L02 / hn);

L03_mat(R_N1,C_IL03) = 1;
L03_mat(R_N2,C_IL03) = -1;
L03_mat(R_L03,C_NV1) = 1;
L03_mat(R_L03,C_NV3) = -1;
L03_mat(R_L03,C_IL03) = -2*(L03 / hn);

L04_mat(R_N5,C_IL04) = 1;
L04_mat(R_N7,C_IL04) = -1;
L04_mat(R_L04,C_NV5) = 1;
L04_mat(R_L04,C_NV7) = -1;
L04_mat(R_L04,C_IL04) = -2*(L04 / hn);

L05_mat(R_N7,C_IL05) = 1;
L05_mat(R_N9,C_IL05) = -1;
L05_mat(R_L05,C_NV7) = 1;
L05_mat(R_L05,C_NV9) = -1;
L05_mat(R_L05,C_IL05) = -2*(L05 / hn);

L06_mat(R_N9,C_IL06) = 1;
L06_mat(R_N11,C_IL06) = -1;
L06_mat(R_L06,C_NV9) = 1;
L06_mat(R_L06,C_NV11) = -1;
L06_mat(R_L06,C_IL06) = -2*(L06 / hn);

L07_mat(R_N11,C_IL07) = 1;
L07_mat(R_N13,C_IL07) = -1;
L07_mat(R_L07,C_NV11) = 1;
L07_mat(R_L07,C_NV13) = -1;
L07_mat(R_L07,C_IL07) = -2*(L07 / hn);

L08_mat(R_N13,C_IL08) = 1;
L08_mat(R_N15,C_IL08) = -1;
L08_mat(R_L08,C_NV13) = 1;
L08_mat(R_L08,C_NV15) = -1;
L08_mat(R_L08,C_IL08) = -2*(L08 / hn);

L09_mat(R_N15,C_IL09) = 1;
L09_mat(R_N17,C_IL09) = -1;
L09_mat(R_L09,C_NV15) = 1;
L09_mat(R_L09,C_NV17) = -1;
L09_mat(R_L09,C_IL09) = -2*(L09 / hn);

LP01_mat(R_N6,C_ILP01) = -1;
LP01_mat(R_LP01,C_NV6) = -1;
LP01_mat(R_LP01,C_ILP01) = -2*(LP01 / hn);

LP02_mat(R_N10,C_ILP02) = -1;
LP02_mat(R_LP02,C_NV10) = -1;
LP02_mat(R_LP02,C_ILP02) = -2*(LP02 / hn);

LP03_mat(R_N14,C_ILP03) = -1;
LP03_mat(R_LP03,C_NV14) = -1;
LP03_mat(R_LP03,C_ILP03) = -2*(LP03 / hn);

LP04_mat(R_N16,C_ILP04) = -1;
LP04_mat(R_LP04,C_NV16) = -1;
LP04_mat(R_LP04,C_ILP04) = -2*(L01 / hn);

LPR01_mat(R_N7,C_ILPR01) = 1;
LPR01_mat(R_N8,C_ILPR01) = -1;
LPR01_mat(R_LPR01,C_NV7) = 1;
LPR01_mat(R_LPR01,C_NV8) = -1;
LPR01_mat(R_LPR01,C_ILPR01) = -2*(LPR01 / hn);

LPR02_mat(R_N11,C_ILPR02) = 1;
LPR02_mat(R_N12,C_ILPR02) = -1;
LPR02_mat(R_LPR02,C_NV11) = 1;
LPR02_mat(R_LPR02,C_NV12) = -1;
LPR02_mat(R_LPR02,C_ILPR02) = -2*(LPR02 / hn);

LRB01_mat(R_N4,C_ILRB01) = 1;
LRB01_mat(R_N5,C_ILRB01) = -1;
LRB01_mat(R_LRB01,C_NV4) = 1;
LRB01_mat(R_LRB01,C_NV5) = -1;
LRB01_mat(R_LRB01,C_ILRB01) = -2*(LRB01 / hn);

LRB02_mat(R_N18,C_ILRB02) = 1;
LRB02_mat(R_N6,C_ILRB02) = -1;
LRB02_mat(R_LRB02,C_NV18) = 1;
LRB02_mat(R_LRB02,C_NV6) = -1;
LRB02_mat(R_LRB02,C_ILRB02) = -2*(LRB02 / hn);

LRB03_mat(R_N19,C_ILRB03) = 1;
LRB03_mat(R_N10,C_ILRB03) = -1;
LRB03_mat(R_LRB03,C_NV19) = 1;
LRB03_mat(R_LRB03,C_NV10) = -1;
LRB03_mat(R_LRB03,C_ILRB03) = -2*(LRB03 / hn);

LRB04_mat(R_N20,C_ILRB04) = 1;
LRB04_mat(R_N14,C_ILRB04) = -1;
LRB04_mat(R_LRB04,C_NV20) = 1;
LRB04_mat(R_LRB04,C_NV14) = -1;
LRB04_mat(R_LRB04,C_ILRB04) = -2*(LRB04 / hn);

LRB05_mat(R_N21,C_ILRB05) = 1;
LRB05_mat(R_N16,C_ILRB05) = -1;
LRB05_mat(R_LRB05,C_NV21) = 1;
LRB05_mat(R_LRB05,C_NV16) = -1;
LRB05_mat(R_LRB05,C_ILRB05) = -2*(LRB05 / hn);

RB01_mat(R_N3,C_NV3) = 1/RB01;
RB01_mat(R_N3,C_NV4) = -1/RB01;
RB01_mat(R_N4,C_NV3) = -1/RB01;
RB01_mat(R_N4,C_NV4) = 1/RB01;

RB02_mat(R_N18,C_NV18) = 1/RB02;
RB02_mat(R_N18,C_NV5) = -1/RB02;
RB02_mat(R_N5,C_NV18) = -1/RB02;
RB02_mat(R_N5,C_NV5) = 1/RB02;

RB03_mat(R_N19,C_NV19) = 1/RB03;
RB03_mat(R_N19,C_NV9) = -1/RB03;
RB03_mat(R_N9,C_NV19) = -1/RB03;
RB03_mat(R_N9,C_NV9) = 1/RB03;

RB04_mat(R_N20,C_NV20) = 1/RB04;
RB04_mat(R_N20,C_NV13) = -1/RB04;
RB04_mat(R_N13,C_NV20) = -1/RB04;
RB04_mat(R_N13,C_NV13) = 1/RB04;

RB05_mat(R_N21,C_NV21) = 1/RB05;
RB05_mat(R_N21,C_NV15) = -1/RB05;
RB05_mat(R_N15,C_NV21) = -1/RB05;
RB05_mat(R_N15,C_NV15) = 1/RB05;

ROUT_mat(R_N17,C_NV17) = 1/ROUT;

A = B01_mat + B02_mat + B03_mat + B04_mat + B05_mat + L01_mat + L02_mat + L03_mat + L04_mat + L05_mat + L06_mat + L07_mat + L08_mat + L09_mat + LP01_mat + LP02_mat + LP03_mat + LP04_mat + LPR01_mat + LPR02_mat + LRB01_mat + LRB02_mat + LRB03_mat + LRB04_mat + LRB05_mat + RB01_mat + RB02_mat + RB03_mat + RB04_mat + RB05_mat + ROUT_mat;
% Sources
IB01 = 0;
for i = 1:(5E-12/hn - 1)
    IB01 = [IB01, (162.5E-6 - 0)/(5E-12 - 0) * (i*hn)];
end
[IB01_rows,IB01_cols] = size(IB01);
IB01 = [IB01, 162.5E-6*ones(1,N-IB01_cols)];
IB02 = 0;
for i = 1:(5E-12/hn - 1)
    IB02 = [IB02, (260E-6 - 0)/(5E-12 - 0) * (i*hn)];
end
[IB02_rows,IB02_cols] = size(IB02);
IB02 = [IB02, 260E-6*ones(1,N-IB02_cols)];
Iin = zeros(1, 4000);
pulseRepeat = 100E-12;
timeDelay = 200E-12;
timeRise = 1E-12;
timeFall = 1E-12;
pulseWidth = 50E-12;
PR = pulseRepeat / hn;
TD = timeDelay / hn;
timestep = 0;
timesteps = 0;
values = 0;
for i = 1:((4000 - TD)/PR)
   timestep = timeDelay + (pulseRepeat * i);
   if timestep < 4000/hn
       timesteps = [timesteps, timestep];
   else
       break;
   end
   values = [values, 0.0];
   timestep = timeDelay + (pulseRepeat * i) + timeRise;
   if timestep < 4000/hn
       timesteps = [timesteps, timestep];
   else
       break;
   end
   values = [values, vPeak];
   timestep = timeDelay + (pulseRepeat * i) + timeRise + pulseWidth;
   if timestep < 4000/hn
       timesteps = [timesteps, timestep];
   else
       break;
   end
   values = [values, vPeak];
   timestep = timeDelay + (pulseRepeat * i) + timeRise + pulseWidth + timeFall;
   if timestep < 4000/hn
       timesteps = [timesteps, timestep];
   else
       break;
   end
   values = [values, 0.0];
end
for i = 1:timesteps.size(); i++) {
			startpoint = timesteps[i - 1] / tsim.maxtstep;
			endpoint = timesteps[i] / tsim.maxtstep;
			for (int j = startpoint; j < endpoint; j++) {
				if (values[i - 1] < values[i]) value = values[i] / (endpoint - startpoint) * (j - (int)startpoint);
				else if (values[i - 1] > values[i]) value = values[i - 1] - (values[i - 1] / (endpoint - startpoint) * (j - (int)startpoint));
				else if (values[i - 1] == values[i]) value = values[i];
				functionOfT[j] = value;
			}
		}